// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/powersjcb/monitor/go/src/server/db"
	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// GetAccountByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetAccountByID(ctx context.Context, id int64) (db.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Account
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByProviderID provides a mock function with given fields: ctx, arg
func (_m *Querier) GetAccountByProviderID(ctx context.Context, arg db.GetAccountByProviderIDParams) (db.Account, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Account
	if rf, ok := ret.Get(0).(func(context.Context, db.GetAccountByProviderIDParams) db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.GetAccountByProviderIDParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountIDForAPIKey provides a mock function with given fields: ctx, apiKey
func (_m *Querier) GetAccountIDForAPIKey(ctx context.Context, apiKey string) (int64, error) {
	ret := _m.Called(ctx, apiKey)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, apiKey)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricForSource provides a mock function with given fields: ctx, source
func (_m *Querier) GetMetricForSource(ctx context.Context, source string) ([]db.Metric, error) {
	ret := _m.Called(ctx, source)

	var r0 []db.Metric
	if rf, ok := ret.Get(0).(func(context.Context, string) []db.Metric); ok {
		r0 = rf(ctx, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Metric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricStatsPerPeriod provides a mock function with given fields: ctx, seconds
func (_m *Querier) GetMetricStatsPerPeriod(ctx context.Context, seconds int32) ([]db.GetMetricStatsPerPeriodRow, error) {
	ret := _m.Called(ctx, seconds)

	var r0 []db.GetMetricStatsPerPeriodRow
	if rf, ok := ret.Get(0).(func(context.Context, int32) []db.GetMetricStatsPerPeriodRow); ok {
		r0 = rf(ctx, seconds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetMetricStatsPerPeriodRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, seconds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetrics provides a mock function with given fields: ctx
func (_m *Querier) GetMetrics(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccount provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertAccount(ctx context.Context, arg db.InsertAccountParams) (db.Account, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Account
	if rf, ok := ret.Get(0).(func(context.Context, db.InsertAccountParams) db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.InsertAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMetric provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertMetric(ctx context.Context, arg db.InsertMetricParams) (db.Metric, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Metric
	if rf, ok := ret.Get(0).(func(context.Context, db.InsertMetricParams) db.Metric); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Metric)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.InsertMetricParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
