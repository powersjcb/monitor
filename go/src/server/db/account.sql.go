// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
)

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, auth_provider_id, auth_provider, api_key, inserted_at
FROM public.accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AuthProviderID,
		&i.AuthProvider,
		&i.ApiKey,
		&i.InsertedAt,
	)
	return i, err
}

const getAccountByProviderID = `-- name: GetAccountByProviderID :one
SELECT id, auth_provider_id, auth_provider, api_key, inserted_at
FROM public.accounts
WHERE auth_provider = $1 AND auth_provider_id = $2
LIMIT 1
`

type GetAccountByProviderIDParams struct {
	AuthProvider   string `json:"auth_provider"`
	AuthProviderID string `json:"auth_provider_id"`
}

func (q *Queries) GetAccountByProviderID(ctx context.Context, arg GetAccountByProviderIDParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByProviderID, arg.AuthProvider, arg.AuthProviderID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AuthProviderID,
		&i.AuthProvider,
		&i.ApiKey,
		&i.InsertedAt,
	)
	return i, err
}

const getAccountIDForAPIKey = `-- name: GetAccountIDForAPIKey :one
SELECT id
FROM public.accounts
WHERE api_key = $1
`

func (q *Queries) GetAccountIDForAPIKey(ctx context.Context, apiKey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountIDForAPIKey, apiKey)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertAccount = `-- name: InsertAccount :one
INSERT INTO public.accounts (auth_provider, auth_provider_id, api_key, inserted_at)
VALUES ($1, $2, $3, NOW())
RETURNING id, auth_provider_id, auth_provider, api_key, inserted_at
`

type InsertAccountParams struct {
	AuthProvider   string `json:"auth_provider"`
	AuthProviderID string `json:"auth_provider_id"`
	ApiKey         string `json:"api_key"`
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, insertAccount, arg.AuthProvider, arg.AuthProviderID, arg.ApiKey)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AuthProviderID,
		&i.AuthProvider,
		&i.ApiKey,
		&i.InsertedAt,
	)
	return i, err
}
