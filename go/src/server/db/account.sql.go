// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
)

const getAccountIDForAPIKey = `-- name: GetAccountIDForAPIKey :one
SELECT id
FROM public.accounts
WHERE api_key = $1
`

func (q *Queries) GetAccountIDForAPIKey(ctx context.Context, apiKey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountIDForAPIKey, apiKey)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertAccount = `-- name: InsertAccount :one
INSERT INTO public.accounts (username, api_key, inserted_at)
    VALUES ($1, $2, NOW())
    RETURNING id, username, api_key, inserted_at
`

type InsertAccountParams struct {
	Username string `json:"username"`
	ApiKey   string `json:"api_key"`
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, insertAccount, arg.Username, arg.ApiKey)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ApiKey,
		&i.InsertedAt,
	)
	return i, err
}
