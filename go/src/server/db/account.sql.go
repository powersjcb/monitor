// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
)

const getAccountIDForAPIKey = `-- name: GetAccountIDForAPIKey :one
SELECT id
FROM public.accounts
WHERE api_key = $1
`

func (q *Queries) GetAccountIDForAPIKey(ctx context.Context, apiKey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountIDForAPIKey, apiKey)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOrCreateAccount = `-- name: GetOrCreateAccount :one
INSERT INTO public.accounts (auth_provider_id, auth_provider, api_key, inserted_at)
VALUES ($1, $2, $3, NOW())
ON CONFLICT (auth_provider_id, auth_provider) DO NOTHING
RETURNING id, auth_provider_id, auth_provider, api_key, inserted_at
`

type GetOrCreateAccountParams struct {
	AuthProviderID string `json:"auth_provider_id"`
	AuthProvider   string `json:"auth_provider"`
	ApiKey         string `json:"api_key"`
}

func (q *Queries) GetOrCreateAccount(ctx context.Context, arg GetOrCreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateAccount, arg.AuthProviderID, arg.AuthProvider, arg.ApiKey)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AuthProviderID,
		&i.AuthProvider,
		&i.ApiKey,
		&i.InsertedAt,
	)
	return i, err
}
